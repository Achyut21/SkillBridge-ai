// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and profile
model User {
  id              String    @id @default(cuid())
  email           String    @unique
  name            String?
  image           String?
  emailVerified   DateTime?
  role            String    @default("USER")
  onboardingCompleted Boolean @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  accounts        Account[]
  sessions        Session[]
  userSkills      UserSkill[]
  learningPaths   LearningPath[]
  progress        Progress[]
  achievements    Achievement[]
  preferences     UserPreferences?
  voiceSessions   VoiceSession[]
  profile         Profile?
  chatSessions    ChatSession[]
  userProgress    UserProgress[]
  skillAssessments SkillAssessment[]
  learningAnalytics LearningAnalytics?
  
  @@index([email])
}

// User Profile
model Profile {
  id                    String   @id @default(cuid())
  userId                String   @unique
  bio                   String?
  targetRole            String?
  currentRole           String?
  location              String?
  linkedinUrl           String?
  githubUrl             String?
  portfolioUrl          String?
  learningGoals         String[]
  preferredLearningStyle String?
  weeklyTimeCommitment  Int?
  preferredVoiceId      String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Chat models
model ChatSession {
  id        String   @id @default(cuid())
  userId    String
  title     String?
  context   Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages ChatMessage[]
  
  @@index([userId])
}

model ChatMessage {
  id        String   @id @default(cuid())
  sessionId String
  role      String   // user, assistant, system
  content   String
  metadata  Json?
  createdAt DateTime @default(now())
  
  session ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  @@index([sessionId])
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

// Skills and competencies
model Skill {
  id            String      @id @default(cuid())
  name          String      @unique
  category      String
  description   String?
  level         String      @default("BEGINNER")
  marketDemand  Float       @default(50) // 0-100 scale
  trendingScore Float       @default(50) // 0-100 scale
  averageSalary Float?
  trendingUp    Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  userSkills         UserSkill[]
  pathSkills         PathSkill[]
  resources          Resource[]
  userProgress       UserProgress[]
  learningPathSkills LearningPathSkill[]
  
  @@index([category])
  @@index([marketDemand])
  @@index([trendingScore])
}

model UserSkill {
  id              String   @id @default(cuid())
  userId          String
  skillId         String
  currentLevel    String   @default("BEGINNER") // BEGINNER, INTERMEDIATE, ADVANCED, EXPERT
  targetLevel     String?
  proficiencyLevel Int     @default(1) // 1-10 scale
  verified        Boolean  @default(false)
  lastAssessed    DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  skill Skill @relation(fields: [skillId], references: [id])
  
  @@unique([userId, skillId])
  @@index([userId])
  @@index([skillId])
}

// Learning paths and resources
model LearningPath {
  id              String    @id @default(cuid())
  userId          String
  title           String
  description     String?
  targetRole      String?
  duration        Int       @default(12) // in weeks
  difficulty      String    @default("MEDIUM") // EASY, MEDIUM, HARD
  progress        Float     @default(0) // 0-100
  isActive        Boolean   @default(true)
  isPublic        Boolean   @default(false)
  completedAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  skills             PathSkill[]
  resources          PathResource[]
  progressTracking   Progress[]
  learningPathSkills LearningPathSkill[]
  
  @@index([userId])
  @@index([isPublic])
}

model PathSkill {
  id             String       @id @default(cuid())
  learningPathId String
  skillId        String
  targetLevel    Int          // 1-10 scale
  priority       Int          @default(0)
  order          Int          @default(0)
  
  learningPath LearningPath @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  skill        Skill        @relation(fields: [skillId], references: [id])
  
  @@unique([learningPathId, skillId])
  @@index([learningPathId])
  @@index([skillId])
}

model Resource {
  id              String    @id @default(cuid())
  title           String
  description     String?
  type            String    // VIDEO, ARTICLE, COURSE, BOOK, TUTORIAL, PRACTICE
  provider        String?   // udemy, coursera, youtube, etc
  url             String
  duration        Int?      // in minutes
  difficulty      String?   // EASY, MEDIUM, HARD
  rating          Float?
  price           Float?
  isFree          Boolean   @default(false)
  skillId         String?
  learningPathId  String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  skill         Skill?         @relation(fields: [skillId], references: [id])
  pathResources PathResource[]
  
  @@index([type])
  @@index([skillId])
  @@index([learningPathId])
}

model PathResource {
  id             String       @id @default(cuid())
  learningPathId String
  resourceId     String
  order          Int
  isCompleted    Boolean      @default(false)
  completedAt    DateTime?
  
  learningPath LearningPath @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  resource     Resource     @relation(fields: [resourceId], references: [id])
  
  @@unique([learningPathId, resourceId])
  @@index([learningPathId])
  @@index([resourceId])
}

// Progress tracking
model Progress {
  id             String       @id @default(cuid())
  userId         String
  learningPathId String
  resourceId     String?
  progressPercent Float       @default(0)
  timeSpent      Int         @default(0) // in minutes
  lastActivity   DateTime    @default(now())
  notes          String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  learningPath LearningPath @relation(fields: [learningPathId], references: [id])
  
  @@unique([userId, learningPathId])
  @@index([userId])
  @@index([learningPathId])
}

// Achievements and milestones
model Achievement {
  id          String   @id @default(cuid())
  userId      String
  type        String   // skill_milestone, path_completion, streak, etc
  title       String
  description String?
  metadata    Json?    // Additional achievement data
  unlockedAt  DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([type])
}

// User preferences and settings
model UserPreferences {
  id                    String   @id @default(cuid())
  userId                String   @unique
  voiceEnabled          Boolean  @default(true)
  voiceId               String?  // ElevenLabs voice ID
  voiceSpeed            Float    @default(1.0)
  dailyLearningGoal     Int      @default(30) // minutes
  notificationsEnabled  Boolean  @default(true)
  preferredLearningTime String?  // morning, afternoon, evening
  theme                 String   @default("dark")
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Voice coaching sessions
model VoiceSession {
  id            String   @id @default(cuid())
  userId        String
  type          String   // daily_briefing, skill_lesson, motivation, etc
  transcript    String?
  audioUrl      String?
  duration      Int?     // in seconds
  sentiment     String?  // positive, neutral, negative
  keyInsights   Json?
  createdAt     DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([type])
  @@index([createdAt])
}

// Market data cache
model MarketData {
  id           String   @id @default(cuid())
  type         String   // job_posting, skill_trend, salary_data
  category     String?
  location     String?
  data         Json
  source       String?
  lastUpdated  DateTime @default(now())
  expiresAt    DateTime
  
  @@index([type])
  @@index([category])
  @@index([lastUpdated])
}

// Additional models for learning path system

// User progress tracking (more detailed than the existing Progress model)
model UserProgress {
  id                String      @id @default(cuid())
  userId            String
  skillId           String
  currentLevel      String      @default("BEGINNER") // BEGINNER, INTERMEDIATE, ADVANCED, EXPERT
  targetLevel       String      @default("INTERMEDIATE")
  progressPercentage Float      @default(0)
  hoursSpent        Int         @default(0)
  lastActivity      DateTime    @default(now())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  skill      Skill       @relation(fields: [skillId], references: [id])
  milestones Milestone[]
  
  @@unique([userId, skillId])
  @@index([userId])
  @@index([skillId])
}

// Milestones for achievements
model Milestone {
  id               String        @id @default(cuid())
  title            String
  description      String
  points           Int           @default(10)
  badge            String?
  achievedAt       DateTime?
  userProgressId   String
  createdAt        DateTime      @default(now())
  
  userProgress UserProgress @relation(fields: [userProgressId], references: [id], onDelete: Cascade)
  
  @@index([userProgressId])
  @@index([achievedAt])
}

// Learning path skills relationship (enhanced)
model LearningPathSkill {
  id             String       @id @default(cuid())
  learningPathId String
  skillId        String
  order          Int          @default(0)
  targetLevel    String       @default("INTERMEDIATE")
  currentLevel   String?
  
  learningPath LearningPath @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  skill        Skill        @relation(fields: [skillId], references: [id])
  
  @@unique([learningPathId, skillId])
  @@index([learningPathId])
  @@index([skillId])
}

// Skill assessments
model SkillAssessment {
  id                      String   @id @default(cuid())
  userId                  String
  currentRole             String
  targetRole              String
  yearsOfExperience       Int      @default(0)
  learningGoals           String[]
  timeCommitment          Int      @default(10)
  preferredLearningStyle  String   @default("VISUAL")
  budget                  Float?
  assessmentResults       Json?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([createdAt])
}

// Learning analytics
model LearningAnalytics {
  id                      String   @id @default(cuid())
  userId                  String   @unique
  totalHoursLearned       Float    @default(0)
  skillsAcquired          Int      @default(0)
  currentStreak           Int      @default(0)
  longestStreak           Int      @default(0)
  completionRate          Float    @default(0)
  averageSessionDuration  Float    @default(0)
  preferredLearningTime   String?
  topSkillCategories      String[]
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
